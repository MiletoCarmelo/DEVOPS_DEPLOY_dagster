==== ./dagster-components/values.dev.yaml ====

dagster:
  module: dagster
  environment: dev
  replicas: 1
  
  # Configuration du fichier dagster.yaml
  filePath: "dagster.yaml"
  
  # Configuration de l'image
  image:
    # repository: ghcr.io/miletocarmelo/devops_helm_generic_dagster_backend/dagster
    repository: ghcr.io/miletocarmelo/devops_deploy_dagster/dagster
    tag: latest
  
  # Configuration des ports
  ports:
    containerPort: 3000
  
  serviceAccount:
    create: true
    name: dagster-dev
    
  # Configuration du service
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  # Variables d'environnement
  env:
    - name: DAGSTER_HOME
      value: /opt/dagster/dagster_home
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: POSTGRES_USER
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: POSTGRES_PASSWORD
    - name: POSTGRES_DB
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: POSTGRES_DB

  # Configuration PostgreSQL
  postgresql:
    enabled: false
    external:
      host: "postgres-58b495dd4d7bdm7"
      port: 5432
      database: "dagster"
  
  # Configuration des volumes
  volumes:
    - name: dagster-dev-app
      configMap:
        name: dagster-app-code
    - name: dagster-dev-storage
      persistentVolumeClaim:
        claimName: dagster-storage
    - name: dagster-dev-config
      configMap:
        name: dagster-dev-config
        items:
          - key: dagster.yaml
            path: dagster.yaml
  
  # Configuration des montages de volumes
  volumeMounts:
    - name: dagster-dev-app
      mountPath: /opt/dagster/app
    - name: dagster-dev-storage
      mountPath: /opt/dagster/dagster_home
    - name: dagster-dev-config
      mountPath: /opt/dagster/dagster_home/dagster.yaml
      subPath: dagster.yaml

==== ./dagster-components/workspace.yaml ====

load_from:
  - grpc_server:
      host: pipeline-successtest
      port: 4000
      location_name: "pipeline-successtest"

==== ./dagster-components/Chart.yaml ====

apiVersion: v2
name: dagster
description: A Helm chart for dagster backend

# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.1.0

# This is the version number of the application being deployed. This version number should be
# incremented each time you make changes to the application. Versions are not expected to
# follow Semantic Versioning. They should reflect the version the application is using.
# It is recommended to use it with quotes.
appVersion: "1.1.0"

dependencies:
  - name: generic-dagster-backend
    version: 0.1.0
    repository: https://raw.githubusercontent.com/MiletoCarmelo/DEVPOS_HELM_generic_dagster_backend/github-pages
    alias: dagster


==== ./dagster-components/output.yaml ====

---
# Source: dagster/templates/serviceaccount.yaml
# serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dagster-dev
  namespace: default
---
# Source: dagster/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dagster-dev-config
  namespace: default
  labels:
    app.kubernetes.io/instance: dagster-dev
data:
  dagster.yaml: |
    scheduler:
      module: dagster.core.scheduler
      class: DagsterDaemonScheduler

    run_coordinator:
      module: dagster.core.run_coordinator
      class: QueuedRunCoordinator

    run_launcher:
      module: dagster.core.launcher
      class: DefaultRunLauncher

    run_storage:
      module: dagster_postgres.run_storage
      class: PostgresRunStorage
      config:
        postgres_db:
          hostname: postgres-58b495dd4d7bdm7
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          db_name: ${POSTGRES_DB}
          port: 5432

    event_log_storage:
      module: dagster_postgres.event_log
      class: PostgresEventLogStorage
      config:
        postgres_db:
          hostname: postgres-58b495dd4d7bdm7
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          db_name: ${POSTGRES_DB}
          port: 5432

    schedule_storage:
      module: dagster_postgres.schedule_storage
      class: PostgresScheduleStorage
      config:
        postgres_db:
          hostname: postgres-58b495dd4d7bdm7
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          db_name: ${POSTGRES_DB}
          port: 5432

    compute_logs:
      module: dagster.core.storage.local_compute_log_manager
      class: LocalComputeLogManager
      config:
        base_dir: /opt/dagster/dagster_home/compute_logs
---
# Source: dagster/charts/dagster/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dagster-dev-service
  labels:
    app.kubernetes.io/component: backend-dagster-dagster-dev
    app.kubernetes.io/instance: dagster-deployment
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dagster-dev
    app.kubernetes.io/version: "1.0.0"
    helm.sh/chart: dagster-0.1.0
    app.kubernetes.io/version: 1.0.0
    module: dagster
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: dagster-dev
---
# Source: dagster/charts/dagster/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: backend-dagster-dagster-dev
    app.kubernetes.io/instance: dagster-deployment
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dagster-dev
    app.kubernetes.io/version: "1.0.0"
    helm.sh/chart: dagster-0.1.0
    app.kubernetes.io/version: 1.0.0
    module: dagster
  name: dagster-dev-deployment
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dagster-dev
  template:
    metadata:
      labels:
        app: dagster-dev
    spec:
      containers:
          ports:
            - name: http
              containerPort: 3000 # Cela doit être le port que votre app écoute
          resources:
            requests:
              memory: 256Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 200m


==== ./dagster-components/templates/serviceaccount.yaml ====

# serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.dagster.module }}-{{ .Values.dagster.environment }}
  namespace: {{ .Release.Namespace }}

==== ./dagster-components/templates/configmap.yaml ====

apiVersion: v1
kind: ConfigMap
metadata:
  name: dagster-dev-config
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: dagster-dev
data:
  dagster.yaml: |
    scheduler:
      module: dagster.core.scheduler
      class: DagsterDaemonScheduler

    run_coordinator:
      module: dagster.core.run_coordinator
      class: QueuedRunCoordinator

    run_launcher:
      module: dagster.core.launcher
      class: DefaultRunLauncher

    run_storage:
      module: dagster_postgres.run_storage
      class: PostgresRunStorage
      config:
        postgres_db:
          hostname: postgres-58b495dd4d7bdm7
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          db_name: ${POSTGRES_DB}
          port: 5432

    event_log_storage:
      module: dagster_postgres.event_log
      class: PostgresEventLogStorage
      config:
        postgres_db:
          hostname: postgres-58b495dd4d7bdm7
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          db_name: ${POSTGRES_DB}
          port: 5432

    schedule_storage:
      module: dagster_postgres.schedule_storage
      class: PostgresScheduleStorage
      config:
        postgres_db:
          hostname: postgres-58b495dd4d7bdm7
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          db_name: ${POSTGRES_DB}
          port: 5432

    compute_logs:
      module: dagster.core.storage.local_compute_log_manager
      class: LocalComputeLogManager
      config:
        base_dir: /opt/dagster/dagster_home/compute_logs

==== ./.github/workflows/ci.yml ====

name: CI

on:
  push:
    branches: 
      - main

env:
  REGISTRY_NAME: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # This will be in the format "owner/repo"
  IMAGE_TAG: latest
  BRANCH_PAGES: github-pages

permissions:
  contents: write
  packages: write  # Allows pushing images to the GitHub Container Registry



jobs:

  build-multiarch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set lowercase IMAGE_NAME
        id: set_image_name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Print IMAGE_NAME_LOWER
        run: echo "${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME_LOWER }}/dagster:latest"
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME_LOWER }}/dagster:latest

  # release-chart:
  #   # needs: build-multiarch
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout main branch
  #       uses: actions/checkout@v4
  #       with:
  #         ref: main

  #     - name: Publish Helm chart
  #       uses: stefanprodan/helm-gh-pages@master
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         charts_dir: ..
  #         target_dir: .
  #         branch: ${{ env.BRANCH_PAGES }}
  #         charts_url: https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}
  #         linting: false
          
  #     - name: summary 
  #       run: echo "https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}"
      



==== ./dagster.yaml ====

scheduler:
  module: dagster.core.scheduler
  class: DagsterDaemonScheduler

run_coordinator:
  module: dagster.core.run_coordinator
  class: QueuedRunCoordinator

run_launcher:
  module: dagster.core.launcher
  class: DefaultRunLauncher

run_storage:
  module: dagster_postgres.run_storage
  class: PostgresRunStorage
  config:
    postgres_db:
      hostname: postgres-58b495dd4d7bdm7
      username: ${POSTGRES_USER}  # correspond au secret
      password: ${POSTGRES_PASSWORD}  # correspond au secret
      db_name: ${POSTGRES_DB}  # correspond au secret
      port: 5432

event_log_storage:
  module: dagster_postgres.event_log
  class: PostgresEventLogStorage
  config:
    postgres_db:
      hostname: postgres-58b495dd4d7bdm7
      username: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      db_name: ${POSTGRES_DB}
      port: 5432

schedule_storage:
  module: dagster_postgres.schedule_storage
  class: PostgresScheduleStorage
  config:
    postgres_db:
      hostname: postgres-58b495dd4d7bdm7
      username: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      db_name: ${POSTGRES_DB}
      port: 5432

compute_logs:
  module: dagster.core.storage.local_compute_log_manager
  class: LocalComputeLogManager
  config:
    base_dir: /opt/dagster/dagster_home/compute_logs

